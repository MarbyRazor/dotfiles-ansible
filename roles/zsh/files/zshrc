# autoload bashcompinit
# bashcompinit

# export DOTFILES=$HOME/.dotfiles
# export EDITOR="nvim"

# source $DOTFILES/bin/.local/scripts/load-k8s-configs

# -----------------------------------------------------------------------------
# Environment/Path settings
# -----------------------------------------------------------------------------
# Storing custom scripts
export PATH="$HOME/.local/bin:$PATH"

# -----------------------------------------------------------------------------
# Kubernetes
# -----------------------------------------------------------------------------
# if [ /usr/bin/kubectl ]; then source <(kubectl completion zsh); fi
#
# alias k=kubectl
# complete -F __start_kubectl k
# export do="--dry-run=client -o yaml"
#
# alias kns=kubens
# complete -F __start_kubens kns
#
# alias knx=kubectx
# complete -F __start_kubectx knx
#
# alias kg='kubectl get'
# alias kgp='kubectl get pod'
# alias kgall='kubectl get --all-namespaces all'
# alias kdp='kubectl describe pod'
# alias kap='kubectl apply'
# alias kapf='kubectl apply -f'
# alias krm='kubectl delete'
# alias krmf='kubectl delete -f'
# alias kgs='kubectl get service'
# alias kgd='kubectl get deployments'
# alias kl='kubectl logs'
# alias kei='kubectl exec -it'
# alias kgns='kubectl get namespaces'

# -----------------------------------------------------------------------------
# FZF and FD
# -----------------------------------------------------------------------------
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(fzf --zsh)"

# export FZF_DEFAULT_OPS="--extended"
# export FZF_DEFAULT_COMMAND="fd --typ f" # Use FD instead of find - ignores files from .gitignore
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

source ~/managed-repos/fzf-git.sh/fzf-git.sh

# -----------------------------------------------------------------------------
# Blazingly fast
# -----------------------------------------------------------------------------
bindkey -s "^f" "tmux-sessionizer\n"

# -----------------------------------------------------------------------------
# go-task
# -----------------------------------------------------------------------------
t () {
    # Attempt to store the output of `task -as` while capturing any errors
    TASK_OUTPUT=$(task -as 2>&1)  # Redirects both standard output and errors

    # Check if an error occurred
    if [ $? -ne 0 ]; then
        # Print the error message and exit the function
        echo "Error: $TASK_OUTPUT"
        return 1
    fi

    # If no error occurred, call `fzf` with the output of `task -as`
    TASK=$(echo "$TASK_OUTPUT" | fzf)

    # If a selection was made, execute the selected task
    if [ -n "$TASK" ]; then
        task "$TASK"
    else
        echo "No task selected."
    fi
}

# -----------------------------------------------------------------------------
# gopass
# -----------------------------------------------------------------------------
# source <(gopass completion bash)

# gp (){
#     QUERY=$1
#     if [ -z "$QUERY"]; then
#         QUERY=''
#     fi
#     gopass show \
#           $(gopass ls --flat \
#            | fzf -q "$QUERY" --preview "gopass show {}" \
#           ) \
#           | xclip -sel clip
# }


# -----------------------------------------------------------------------------
# Alias
# -----------------------------------------------------------------------------

# # Globacl
alias ll="ls -ahl"
alias l="ls -ahl"
# alias vim=$EDITOR
# alias vi=$EDITOR
# alias v="$EDITOR ."
# alias reload="source ~/.zshrc"
# alias c="code ."
# alias ta="tmux a"
#
# # Git
alias gs='git status'
alias gb='git branch '
# alias gcm='git commit -m'
# alias goc='git checkout '
# alias gob='git checkout -b '
# alias gco='git checkout'
# alias glog='git log --pretty=oneline --abbrev-commit'
# alias glod='git log --graph --pretty="%Cgreen%h%Creset%Cblue%d%Creset %Cred%an%Creset: %s"'
# alias gitl='git log --pretty=oneline'
# alias lgl='git log --oneline --decorate'
# alias up='git pull upstream master'
# # when I mispell git commands the following 2 commands help
alias got='git '
alias get='git '
#
# # unix
# alias c='cat'
# alias le='less -j4'
# alias v='vim'
#
# alias fn='find . -name "*'
# alias ff='find . -name "*.'
alias sz='source ~/.zshrc'
# alias rp='realpath'
# alias CC='$(fc -l -n -1) | xclip -sel clip'

# # unix
# alias -g md='mkdir -p'
# alias -g wh='which'
# # ialias -g grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
# alias -g L='| less'
# alias -g H='| head'
# alias -g H2='| head -n 20'
# alias -g G='| grep'
# alias -g Gi='| grep -i'
# alias -g GH='| grep HTTP'
# alias -g X='| xargs -I1'
# alias -g C='| xclip -sel clip'
# # alias -g B='echo -n "setme" | base64 | xclip -sel clip'
# alias -g Fj='| jq .'
# alias -g Fy='| yq .'
# alias -g V='| vim -'
#
# # arguments
# # auto-completes aliases
# # enables to define
# # - normal aliases (completed with trailing space)
# # - blank aliases (completed without space)
# # - ignored aliases (not completed)
#
#
# # ignored aliases
# typeset -a ialiases
# ialiases=()
#
# ialias() {
#     alias $@
#     args="$@"
#     args=${args%%\=*}
#     ialiases+=(${args##* })
# }
#
#
# # blank aliases
# typeset -a baliases
# baliases=()
#
# balias() {
#     alias $@
#     args="$@"
#     args=${args%%\=*}
#     baliases+=(${args##* })
# }
#
#
# # functionality
# expand-alias-space() {
#     [[ $LBUFFER =~ "\<(${(j:|:)baliases})\$" ]]; insertBlank=$?
#     if [[ ! $LBUFFER =~ "\<(${(j:|:)ialiases})\$" ]]; then
#         zle _expand_alias
#     fi
#     zle self-insert
#     if [[ "$insertBlank" = "0" ]]; then
#         zle backward-delete-char
#     fi
# }
# zle -N expand-alias-space
#
#
# # starts multiple args as programs in background
# background() {
#     for ((i=2;i<=$#;i++)); do
#         ${@[1]} ${@[$i]} &> /dev/null &
#     done
# }
#
#
# bindkey " " expand-alias-space
# bindkey -M isearch " " magic-space
#
#
# # file completion patterns
# zstyle ':completion:*:*:vim:*' file-patterns '^*.(pdf|odt|ods|doc|docx|xls|xlsx|odp|ppt|pptx|mp4|mkv|aux):source-files' '*:all-files'
# zstyle ':completion:*:*:(build-workshop|build-document):*' file-patterns '*.adoc'
#
#
# sourceIfExists() {
#   if [ -e $1 ]; then
#     source $1;
#   fi
# }
#
# sourceIfExists ~/.aliases
# # sourceIfExists /usr/local/ibmcloud/autocomplete/zsh_autocomplete 
